Start with this annotated example JSON config file when creating your own config file:

	{
		 // "kind" must be either "googles3" or "local". For "local",
		 // field "local" below is used. For "googles3", the "googles3"
		 // field.
		"kind": "googles3",


		"local": {
			// Where to store backup files on the local file system
			// (which could be mounted over the network).
			"path": "../x"
		},


		"googles3": {
			// For your account.
			"accessKey": "GOOGLTEST123456789",
			"secret": "bm90IGEgcmVhbCBrZXkuIG5pY2UgdHJ5IHRob3VnaCBeXg==",

			// Create your bucket first, we won't create it for you.
			"bucket": "your-bucket-name",

			// Directory within your backup to store the files in.
			// It should be either "/", or any other path that
			// starts and ends with a slash.
			"path": "/optional/subdir/"
		},

		/*
		If this list is non-empty, only files that match one of these
		regular expressions will be included in the backup. this has no
		effect on restore.
		The paths matched against your regexp can be directories or
		regular files. Directories end with a slash, except the root
		directory, which is matched as the empty string. If a directory
		matches, all children are whitelisted. If a file matches, it is
		included. Directories that don't match are still included, files
		that don't match are not included.
		If a directory or file also matches an "exclude" (below), the
		file/directory is not included. So, includes are evaluated
		first, but excludes are also always evaluated for each path.
		*/
		"include": [
			"^testdata/$",
			"\\.go$"
		],

		/*
		Similar to "include", but if a path matches one of these regular
		expressions, it will not be included in the backup (even if the
		path matches one of the "include"s).
		*/
		"exclude": [
			"^tmp/",
			"^.git/",
			"/.git/",
		],

		/*
		How many incrementals will be created before doing a full backup
		again. For a weekly full backup, set this to 6.
		*/
		"incrementalsPerFull": 2,

		/*
		How many full backups to keep. After each backup, older backups
		will be cleaned up.
		*/
		"fullKeep": 5,

		// For how many full backups we keep incremental backups.
		"incrementalForFullKeep": 3,

		// The passphrase used to encrypt the backup files (after key
		// derivation, with per-file salt).
		"passphrase": "your secret keyphrase"
	}
