package main

import (
	"bufio"
	"crypto/rand"
	"crypto/sha512"
	"fmt"
	"io"

	"github.com/minio/sio"
	"github.com/pierrec/lz4"
	"golang.org/x/crypto/pbkdf2"
)

// Our safe file consists of:
// - 32 byte salt, for deriving a key based on a passphrase
// - a file generated by github.com/minio/sio

type safeReader struct {
	orig   io.ReadCloser
	lz     io.Reader
	crypt  io.Reader
	reader io.Reader
}

func newSafeReader(r io.ReadCloser) (*safeReader, error) {
	salt := make([]byte, 32)
	_, err := io.ReadFull(r, salt)
	if err != nil {
		return nil, fmt.Errorf("reading salt: %s", err)
	}
	key := pbkdf2.Key([]byte(config.Passphrase), salt, 4096, 32, sha512.New)
	sf := &safeReader{orig: r}
	sf.crypt, err = sio.DecryptReader(sf.orig, sio.Config{Key: key})
	if err != nil {
		return nil, fmt.Errorf("decrypting file: %s", err)
	}
	sf.lz = lz4.NewReader(sf.crypt)
	sf.reader = bufio.NewReader(sf.lz)
	return sf, nil
}

func (sf *safeReader) Read(buf []byte) (n int, err error) {
	return sf.reader.Read(buf)
}

func (sf *safeReader) Close() error {
	return sf.orig.Close()
}

type safeWriter struct {
	orig   io.WriteCloser
	crypt  io.WriteCloser
	lz     io.WriteCloser
	writer *bufio.Writer
}

func newSafeWriter(w io.WriteCloser) (*safeWriter, error) {
	salt := make([]byte, 32)
	_, err := rand.Read(salt)
	if err != nil {
		return nil, fmt.Errorf("generating salt: %s", err)
	}
	_, err = w.Write(salt)
	if err != nil {
		return nil, fmt.Errorf("writing salt: %s", err)
	}
	key := pbkdf2.Key([]byte(config.Passphrase), salt, 4096, 32, sha512.New)
	sf := &safeWriter{orig: w}
	sf.crypt, err = sio.EncryptWriter(sf.orig, sio.Config{Key: key})
	if err != nil {
		return nil, fmt.Errorf("creating encrypted file: %s", err)
	}
	sf.lz = lz4.NewWriter(sf.crypt)
	sf.writer = bufio.NewWriter(sf.lz)
	return sf, nil
}

func (sf *safeWriter) Write(buf []byte) (n int, err error) {
	return sf.writer.Write(buf)
}

func (sf *safeWriter) Close() (rerr error) {
	err := sf.writer.Flush()
	err2 := sf.lz.Close()
	if err == nil {
		err = err2
	}
	err2 = sf.crypt.Close()
	if err == nil {
		err = err2
	}
	return err
}
